@inject IHttpContextAccessor _context
@page "/"
@using System.Net.Http.Headers;
@inject IHttpContextAccessor _context
@inject HttpClient Http
@inject IHttpClientFactory _fact
@inject IConfiguration _conf
@using System.Net.Http.Json
@using static MudBlazor.CategoryTypes;
@inject HttpClient httpClient
@inject NavigationManager navigation;
@using Models
@using ModelsOnPrem
@using ServicesOnPrem.Services
@inject ISmartwatchServices _service

<PageTitle>Earth4Sport</PageTitle>

<MudContainer>
    <MudItem>
        <MudTable CustomHeader="true" Items="smartwatchesOnPrems" Hover Striped Bordered="true" FixedHeader FixedFooter Style="height:auto; width:190vh; margin-left:4vh;" Dense>
            <HeaderContent>
                <MudTh>Id</MudTh>
                <MudTh>Buying Date</MudTh>
                <MudTh>Production Batch</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>@context.Id</MudTd>
                <MudTd>@context.BuyingDate</MudTd>
                <MudTd>@context.ProductionBatch</MudTd>
                <MudTd><MudButton Variant="Variant.Outlined" Size="Size.Small" OnClick="@(() => ShowBtnPress(context.Id))">@((context.Show == true) ? "Hide" : "Show") Session Details</MudButton></MudTd>
            </RowTemplate>
            <NoRecordsContent>
                <MudText>No matching records found</MudText>
            </NoRecordsContent>
            <LoadingContent>
                <MudText>Loading...</MudText>
            </LoadingContent>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
            <ChildRowContent>
                @if (context.Show)
                {
                    <MudTr>
                        <td colspan="6">
                            <MudCard Elevation="0">
                                <MudCardContent Class="pa-0">
                                    <MudTable Items="smartwatches" Context="smart" Hover="true" Breakpoint="Breakpoint.Sm" Elevation="0" FixedHeader="true" Height="400px">
                                        <HeaderContent>
                                            <MudTh>Timestamp</MudTh>
                                            <MudTh>Position</MudTh>
                                            <MudTh>HeartRate</MudTh>
                                            <MudTh>Status</MudTh>
                                        </HeaderContent>
                                        <RowTemplate>
                                            <MudTd>@smart.Timestamp</MudTd>
                                            <MudTd>@smart.Position</MudTd>
                                            <MudTd>@smart.HeartRate</MudTd>
                                            @if (smart.HeartRate > 100 || smart.HeartRate < 30)
                                            {
                                                <MudTd>❌</MudTd>
                                            }
                                            else
                                            {
                                                <MudTd>✅</MudTd>
                                            }
                                        </RowTemplate>
                                    </MudTable>
                                </MudCardContent>
                            </MudCard>
                        </td>
                    </MudTr>
                }
            </ChildRowContent>
        </MudTable>
    </MudItem>
</MudContainer>

@code {
    private List<SmartwatchesOnPrem>? smartwatchesOnPrems = new List<SmartwatchesOnPrem>();
    public List<Smartwatch>? smartwatches = new List<Smartwatch>();
    private string error = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (true)
            {
                Http = _fact.CreateClient(_conf["ApiLink"]!);
            }

            smartwatchesOnPrems = await _service.GetSmartwatchesOnPremAsync();    
            
            smartwatches = await Http.GetFromJsonAsync<List<Smartwatch>>($"{_conf["ApiLink"]}/GetSmartwatchById?id={smartwatchesOnPrems.Last().Id}");
        }
        catch (Exception e)
        {
            error = e.Message;
        }
    }

    private async void ShowBtnPress(Guid smartId)
    {
        SmartwatchesOnPrem smart = smartwatchesOnPrems!.First(x => x.Id == smartId);
        smart.Show = !smart.Show;
    }
}                               