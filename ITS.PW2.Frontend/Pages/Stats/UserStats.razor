@page "/UserStats"
@using Microsoft.AspNetCore.Authentication;
@using Microsoft.AspNetCore.Authentication.Cookies;
@using Microsoft.IdentityModel.Protocols.OpenIdConnect;
@using System.Net.Http.Headers;
@inject IHttpContextAccessor _context
@inject HttpClient Http
@inject IHttpClientFactory _fact
@inject IConfiguration _conf

<PageTitle>User Stats</PageTitle>

@if (!_context.HttpContext!.User.Identity!.IsAuthenticated)
{
    <h1>You're not supposed to be here</h1>
}
else
{
    @if (SessionList!.Count == 0)
    {
        <MudProgressCircular Color="Color.Default" Indeterminate="true" />
    }
    <MudTable Items="SessionList" Hover Striped Bordered FixedHeader Dense>        
        <HeaderContent>
            <MudTh>SessionTime</MudTh>
            <MudTh>SessionDistance</MudTh>
            <MudTh>AvgHeartRate</MudTh>
            <MudTh>PoolLaps</MudTh>
            <MudTh>PoolLength</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>@context.SessionTime</MudTd>
            <MudTd>@context.SessionDistance</MudTd>
            <MudTd>@context.AvgHeartRate</MudTd>
            <MudTd>@context.PoolLaps</MudTd>
            <MudTd>@context.PoolLength</MudTd>
        </RowTemplate>
    </MudTable>
}

@code {
    private List<SessionModel>? SessionList = new List<SessionModel>();

    private string error = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var token = await _context.HttpContext!.GetTokenAsync(CookieAuthenticationDefaults.AuthenticationScheme, OpenIdConnectParameterNames.AccessToken)!;

            if (true)
            {
                Http = _fact.CreateClient(_conf["ApiLink"]);
            }
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            SessionList = await Http.GetFromJsonAsync<List<SessionModel>>($"");
        }
        catch (Exception e)
        {
            error = e.Message;
        }
    }
}
