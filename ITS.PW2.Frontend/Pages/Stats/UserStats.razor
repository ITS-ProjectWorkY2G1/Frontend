@page "/UserStats"
@using Microsoft.AspNetCore.Authentication;
@using Microsoft.AspNetCore.Authentication.Cookies;
@using Microsoft.IdentityModel.Protocols.OpenIdConnect;
@using System.Net.Http.Headers;
@inject AuthenticationStateProvider auth;
@inject HttpClient Http
@inject IHttpClientFactory _fact
@inject IConfiguration _conf
@*@inject IHttpContextAccessor _context*@

<PageTitle>User Stats</PageTitle>

@if (!auth.GetAuthenticationStateAsync().Result.User.Identity!.IsAuthenticated)
{
    <h1>You're not supposed to be here</h1>
}
else
{
    <MudContainer Class="d-flex flex-grow-1 gap-5" Style="margin-top:5vh">
        <MudItem xs="6" Class="d-flex mx-auto">
            <MudTable CustomHeader="true" Items="FullSessionList" Hover Striped Bordered="true" FixedHeader FixedFooter Style="height:auto; width:80vh;" Dense>
                <HeaderContent>
                    <MudTh>Session Number</MudTh>
                    <MudTh>Session Time</MudTh>
                    <MudTh>Session Distance</MudTh>
                    <MudTh>Average Heart Rate</MudTh>
                    <MudTh>Pool Laps</MudTh>
                    <MudTh>Pool Length</MudTh>
                    <MudTh>Details</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>@context.SessionId</MudTd>
                    <MudTd>@context.SessionTime</MudTd>
                    <MudTd>@context.SessionDistance</MudTd>
                    <MudTd>@context.AvgHeartRate</MudTd>
                    <MudTd>@context.PoolLaps</MudTd>
                    <MudTd>@context.PoolLength</MudTd>
                    <MudTd><MudButton Variant="Variant.Outlined" Size="Size.Small" OnClick="@(() => ShowBtnPress(context.SessionId))">@((context.ShowDetails == true) ? "Hide" : "Show") Session Details</MudButton></MudTd>
                </RowTemplate>
                <NoRecordsContent>
                    <MudText>No matching records found</MudText>
                </NoRecordsContent>
                <LoadingContent>
                    <MudText>Loading...</MudText>
                </LoadingContent>
                <PagerContent>
                    <MudTablePager />
                </PagerContent>
                <ChildRowContent>
                    @if (context.ShowDetails)
                    {
                        <MudTr>
                            <td colspan="6">
                                <MudCard Elevation="0">
                                    <MudCardContent Class="pa-0">
                                        <MudTable @ref="table" Items="context.smartwatches" Context="smart" Hover="true" Breakpoint="Breakpoint.Sm" Elevation="0" FixedHeader="true" Height="400px" >
                                            @*ServerData="@(new Func<TableState, Task<TableData<Smartwatch>>>(ServerReload))"*@
                                            <HeaderContent>
                                                <MudTh>Position</MudTh>
                                                <MudTh >Timestamp</MudTh>
                                                <MudTh>HeartRate</MudTh>
                                            </HeaderContent>
                                            <RowTemplate>
                                                <MudTd>@smart.Position</MudTd>
                                                <MudTd>@smart.Timestamp</MudTd>
                                                <MudTd>@smart.HeartRate</MudTd>
                                            </RowTemplate>
                                        </MudTable>
                                    </MudCardContent>
                                </MudCard>
                            </td>
                        </MudTr>
                    }
                </ChildRowContent>
                <ToolBarContent>
                    <MudDatePicker @ref="_picker" Label="Session Date" DateChanged="@(s => {_date = s ; OnDatePick(s); })" AutoClose="@autoClose">
                        <PickerActions>
                            <MudButton Class="mr-auto align-self-start" OnClick="@(() => _picker.Clear())">Clear</MudButton>
                            <MudButton OnClick="@(() => _picker!.Close(false))">Cancel</MudButton>
                            <MudButton Color="Color.Primary" OnClick="@(() => _picker!.Close())">Ok</MudButton>
                        </PickerActions>
                    </MudDatePicker>
                </ToolBarContent>
            </MudTable>
        </MudItem>
        <MudItem xs="6" Class="d-flex" Style="padding:2vh">
            <MudChart ChartType="ChartType.Bar" ChartSeries="@Series" XAxisLabels="@XAxisLabels" Width="100%" Height="350px">
            </MudChart>
        </MudItem>
        @*<MudText>token: @token</MudText>*@
    </MudContainer>
}

<style>
    .mud-container {
        width: 100%;
        display: block;
        box-sizing: border-box;
        margin-left: 2vw;
        margin-right: 0;
    }
</style>


@code {
    private List<SessionModel>? FullSessionList = new List<SessionModel>();
    private MudTable<Smartwatch>? table = new MudTable<Smartwatch>();
    private bool _readOnly;
    private bool _isCellEditMode;
    private bool _editTriggerRowClick;
    private string error = "";
    //private string? token = "ciao";

    public static double[] AvgHR = new double[8];
    public static double[] SessionDistance = new double[8];
    public static double[] PoolLaps = new double[8];
    public static double[] PoolLength = new double[8];
    public static double[] SessionTime = new double[8];

    protected override async Task OnInitializedAsync()
    {
        options.InterpolationOption = InterpolationOption.NaturalSpline;
        try
        {
            //token = await _context.HttpContext!.GetTokenAsync(CookieAuthenticationDefaults.AuthenticationScheme, OpenIdConnectParameterNames.AccessToken)!;

            var id = auth.GetAuthenticationStateAsync().Result!.User.Claims.FirstOrDefault(x => x.Type == "Id")!.Value;

            //if (true)
            //{
            //    Http = _fact.CreateClient(_conf["ApiLink"]);
            //}
            //Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);         

            FullSessionList = await Http.GetFromJsonAsync<List<SessionModel>>($"{_conf["ApiLink"]}/GetFullSessionsList?userId={id}");
            FullSessionList!.Reverse();
            int i = 0;
            foreach(var value in FullSessionList!)
            {
                if (i > 8) break;
                AvgHR[i] = value.AvgHeartRate;
                SessionDistance[i] = value.SessionDistance;
                PoolLaps[i] = value.PoolLaps;
                PoolLength[i] = value.PoolLength;
                SessionTime[i] = value.SessionTime.TotalMinutes;

                i++;
            }
        }
        catch (Exception e)
        {
            error = e.Message;
        }
    }

    private MudDatePicker? _picker;
    DateTime? _date = DateTime.Today;
    private bool _autoClose;
    private bool autoClose;

    private void ShowBtnPress(Guid sessionId)
    {
        SessionModel session = FullSessionList!.First(x => x.SessionId == sessionId);
        session.ShowDetails = !session.ShowDetails;
    }

    private async Task OnDatePick(DateTime? date)
    {
        _date = date;
        await table!.ReloadServerData();
    }

    private ChartOptions options = new ChartOptions();
    public List<ChartSeries> Series = new List<ChartSeries>()
    {
        new ChartSeries() { Name = "Average HR", Data = AvgHR },
        new ChartSeries() { Name = "Session Distance", Data = SessionDistance },
        new ChartSeries() { Name = "Pool laps", Data =  PoolLength },
        new ChartSeries() { Name = "Pool length", Data = PoolLength },
        new ChartSeries() { Name = "Session Time", Data = SessionTime}
    };
    public string[] XAxisLabels = { "Stats" };

    void OnClickMenu(InterpolationOption interpolationOption)
    {
        options.InterpolationOption = interpolationOption;
        StateHasChanged();
    }


}
